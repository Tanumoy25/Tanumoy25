import math
import itertools
data = """............0.......................Bn...........v
.........0.....................8.........P.....D..
........M...........Q..0..8...h.......P...........
......M.A......c...................n..............
.....C..................A.........................
.M.AC....................................v........
........C..........W...w....J........Q...........y
.....i..............0.....nW.......w.Zv...6.......
........c....................A.........Pm........D
.............t.........x..........P....y....m.....
........................w...x.......F....Z........
...............Q......x6.......S......Z..O.......J
..............o.u........x....6.....r.D..M........
............c...o........u...Y....................
.........i............9..............g............
.....................d..WC..8.........J.g.........
...........X.c...............d...........m........
....................9.dR...........m......y.......
.............o.....9.......Y.6.OS...n..........F..
......i..................a..Q...r.Y.............U.
.....N......X......u..Ot...a......j......7........
..........q..X......t.....uH.......j.r..S.7.......
..........l...t....K.......................J......
...............9..............OB..................
...l.R...q..............g.......Y.7..V.......S....
..........................a.D............V........
......R.5...v.....W.............KB............U...
........Kp..F.N...........2.....B..............U..
..............................d..........h........
...L...NX...l...R...w..........F...........7......
..q.L......5.........................j............
.q.............5.......g..4.......................
............p...................s2..............Z.
......L...p...........................s..I........
........N..............................H..........
............5......................2.......hV.....
.............3..........1.......f.a...V...........
.....K..................................Hz....j...
.............k.b..G................I.....U........
.............1......................h.............
...........p...........L.....s....4T..............
.b..................G....s.T......I...............
............................H...........T4........
...............lk.................T...............
..i........................1........Iz............
..............b...........1........G..............
....b..............G..............................
........3......k............f..............4......
3.............k.2.....................z...........
...........3......................z..f............"""

data = data.splitlines()
data = [list(i) for i in data]
mapping = {}
bounds = len(data[0])
for i in range(len(data)):
    for j in range(len(data[0])):
        mapping[(i, j)] = data[i][j]

if len(data[0]) != len(data):
    print("Area Not a Square! Tread with caution!")

antennaInfo = {}
for i in range(len(data)):
    for j in range(len(data[0])):
        if mapping[(i, j)] != ".":
            if mapping[(i, j)] not in antennaInfo:
                antennaInfo[mapping[(i, j)]] = [(i, j)]
            else:
                antennaInfo[mapping[(i, j)]].append((i, j))

locations = []
for key in antennaInfo:
    for pair in itertools.product(antennaInfo[key], repeat=2):
        if pair[0] != pair[1]:
            dX = pair[1][0] - pair[0][0]
            dY = pair[1][1] - pair[0][1]
            antinode0 = (pair[0][0]-dX, pair[0][1]-dY)
            if antinode0[0] >= 0 and antinode0[0] < bounds and antinode0[1] >= 0 and antinode0[1] < bounds:
                if antinode0 not in locations:
                    locations.append(antinode0)
            antinode1 = (pair[1][0]+dX, pair[1][1]+dY)
            if antinode1[0] >= 0 and antinode1[0] < bounds and antinode1[1] >= 0 and antinode1[1] < bounds:
                if antinode1 not in locations:
                    locations.append(antinode1)
print(f"Part 1 answer: {len(locations)}")

locations = []
for key in antennaInfo:
    for pair in itertools.product(antennaInfo[key], repeat=2):
        if pair[0] != pair[1]:
            dX = pair[1][0] - pair[0][0]
            dY = pair[1][1] - pair[0][1]
            if pair[0] not in locations:
                locations.append(pair[0])
            if pair[1] not in locations:
                locations.append(pair[1])
            if dX == 0:
                for i in range(len(bounds)):
                    if (i, pair[0][0]) not in locations:
                        locations.append((i, pair[0][0]))
            if dY == 0:
                for i in range(len(bounds)):
                    if (i, pair[0][1]) not in locations:
                        locations.append((i, pair[0][1]))
            if math.gcd(dX, dY) != 0:
                gcd = math.gcd(dX, dY)
                dX = dX / gcd
                dY = dY / gcd
            antinode0 = (pair[0][0]-dX, pair[0][1]-dY)
            while antinode0[0] >= 0 and antinode0[0] < bounds and antinode0[1] >= 0 and antinode0[1] < bounds:
                if antinode0 not in locations:
                    locations.append(antinode0)
                antinode0 = (antinode0[0]-dX, antinode0[1]-dY)
            antinode1 = (pair[0][0]+dX, pair[0][1]+dY)
            while antinode1[0] >= 0 and antinode1[0] < bounds and antinode1[1] >= 0 and antinode1[1] < bounds:
                if antinode1 not in locations:
                    locations.append(antinode1)
                antinode1 = (antinode1[0]+dX, antinode1[1]+dY)

print(f"Part 2 answer: {len(locations)}")